name: ci-cd-ec2-ecr

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1                      # <-- change
  AWS_ACCOUNT_ID: 816582314784               # <-- change
  ECR_REPOSITORY: doc                        # <-- your ECR repo name
  CONTAINER_NAME: react                      # name on EC2
  HOST_PORT: "8080"                            # EC2 public port
  CONTAINER_PORT: "80"                       # port exposed inside image (Nginx=80)
  EC2_INSTANCE_ID: i-0db4696f285ba9abf       # <-- change
  ROLE_TO_ASSUME: arn:aws:iam::816582314784:role/GitHubActionsDeployer  # <-- change

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          docker build -t ${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "Pushed ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger SSM command on EC2
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          # Build the JSON "Parameters" payload safely
          jq -n \
            --arg REGION        "${AWS_REGION}" \
            --arg ACCOUNT_ID    "${AWS_ACCOUNT_ID}" \
            --arg REPO          "${ECR_REPOSITORY}" \
            --arg TAG           "${IMAGE_TAG}" \
            --arg NAME          "${CONTAINER_NAME}" \
            --arg HOST_PORT     "${HOST_PORT}" \
            --arg CONTAINER_PORT "${CONTAINER_PORT}" \
            '{
              commands: [
                "set -euo pipefail",
                "REGION=\"\($REGION)\"",
                "ECR=\"\($ACCOUNT_ID).dkr.ecr.\($REGION).amazonaws.com\"",
                "REPO=\"\($REPO)\"",
                "TAG=\"\($TAG)\"",
                "NAME=\"\($NAME)\"",
                "HOST_PORT=\"\($HOST_PORT)\"",
                "CONTAINER_PORT=\"\($CONTAINER_PORT)\"",
                "aws ecr get-login-password --region \"$REGION\" | docker login --username AWS --password-stdin \"$ECR\"",
                "docker pull \"$ECR/$REPO:$TAG\"",
                "docker ps -q --filter \"name=$NAME\" | xargs -r docker stop",
                "docker ps -aq --filter \"name=$NAME\" | xargs -r docker rm",
                "docker run -d --name \"$NAME\" -p \"$HOST_PORT:$CONTAINER_PORT\" --restart always \"$ECR/$REPO:$TAG\"",
                "docker ps --filter \"name=$NAME\""
              ]
            }' > /tmp/params.json

          # Build the full request and call SSM with --cli-input-json (avoids shell quoting pain)
          jq -n \
            --arg INSTANCE_ID "${EC2_INSTANCE_ID}" \
            --arg DOC "AWS-RunShellScript" \
            --slurpfile P /tmp/params.json \
            '{ InstanceIds: [$INSTANCE_ID], DocumentName: $DOC, Comment: "Redeploy docker container", Parameters: $P[0] }' \
            > /tmp/ssm-input.json

          aws ssm send-command --cli-input-json file:///tmp/ssm-input.json \
            --output json > /tmp/cmd.json

          CMD_ID=$(jq -r '.Command.CommandId' /tmp/cmd.json)
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${EC2_INSTANCE_ID}"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${EC2_INSTANCE_ID}"