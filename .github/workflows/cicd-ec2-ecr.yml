name: ci-cd-ec2-ecr

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1                      # <-- change
  AWS_ACCOUNT_ID: 816582314784               # <-- change
  ECR_REPOSITORY: doc                        # <-- your ECR repo name
  CONTAINER_NAME: react                      # name on EC2
  HOST_PORT: "8080"                            # EC2 public port
  CONTAINER_PORT: "80"                       # port exposed inside image (Nginx=80)
  EC2_INSTANCE_ID: i-0db4696f285ba9abf       # <-- change
  ROLE_TO_ASSUME: arn:aws:iam::816582314784:role/GitHubActionsDeployer  # <-- change

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          docker build -t ${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "Pushed ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger SSM command on EC2
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          aws ssm send-command \
            --instance-ids "${EC2_INSTANCE_ID}" \
            --document-name "AWS-RunShellScript" \
            --comment "Redeploy docker container" \
            --parameters commands="$(cat <<'EOS'
          set -euo pipefail
          REGION="${AWS_REGION}"
          ECR="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          REPO="${ECR_REPOSITORY}"
          TAG="${IMAGE_TAG}"
          NAME="${CONTAINER_NAME}"
          HOST_PORT="${HOST_PORT}"
          CONTAINER_PORT="${CONTAINER_PORT}"

          aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "${ECR}"

          # pull new image
          docker pull "${ECR}/${REPO}:${TAG}"

          # stop & remove old container (if exists)
          docker ps -q --filter "name=${NAME}" | xargs -r docker stop
          docker ps -aq --filter "name=${NAME}" | xargs -r docker rm

          # run new
          docker run -d --name "${NAME}" \
            -p "${HOST_PORT}:${CONTAINER_PORT}" \
            --restart always \
            "${ECR}/${REPO}:${TAG}"

          # show status
          docker ps --filter "name=${NAME}"
          EOS
          )" \
            --output-s3-bucket-name "" >/tmp/cmd.json

          CMD_ID=$(jq -r '.Command.CommandId' /tmp/cmd.json)
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "${EC2_INSTANCE_ID}"
          aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "${EC2_INSTANCE_ID}"
